// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Port
{
    [PortResourceType("port:index/blueprint:Blueprint")]
    public partial class Blueprint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set of properties that are calculated upon Entitys regular properties.
        /// </summary>
        [Output("calculationProperties")]
        public Output<ImmutableArray<Outputs.BlueprintCalculationProperty>> CalculationProperties { get; private set; } = null!;

        /// <summary>
        /// Blueprints changelog destination, Supports WEBHOOK and KAFKA
        /// </summary>
        [Output("changelogDestination")]
        public Output<Outputs.BlueprintChangelogDestination?> ChangelogDestination { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The data source for entities of this blueprint
        /// </summary>
        [Output("dataSource")]
        public Output<string?> DataSource { get; private set; } = null!;

        /// <summary>
        /// The description of the blueprint
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The icon of the blueprint
        /// </summary>
        [Output("icon")]
        public Output<string?> Icon { get; private set; } = null!;

        /// <summary>
        /// The identifier of the blueprint
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
        /// Blueprint.
        /// </summary>
        [Output("mirrorProperties")]
        public Output<ImmutableArray<Outputs.BlueprintMirrorProperty>> MirrorProperties { get; private set; } = null!;

        /// <summary>
        /// The metadata of the entity
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.BlueprintProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// The blueprints that are connected to this blueprint
        /// </summary>
        [Output("relations")]
        public Output<ImmutableArray<Outputs.BlueprintRelation>> Relations { get; private set; } = null!;

        /// <summary>
        /// The display name of the blueprint
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        [Output("updatedBy")]
        public Output<string> UpdatedBy { get; private set; } = null!;


        /// <summary>
        /// Create a Blueprint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Blueprint(string name, BlueprintArgs args, CustomResourceOptions? options = null)
            : base("port:index/blueprint:Blueprint", name, args ?? new BlueprintArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Blueprint(string name, Input<string> id, BlueprintState? state = null, CustomResourceOptions? options = null)
            : base("port:index/blueprint:Blueprint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-port-labs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Blueprint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Blueprint Get(string name, Input<string> id, BlueprintState? state = null, CustomResourceOptions? options = null)
        {
            return new Blueprint(name, id, state, options);
        }
    }

    public sealed class BlueprintArgs : global::Pulumi.ResourceArgs
    {
        [Input("calculationProperties")]
        private InputList<Inputs.BlueprintCalculationPropertyArgs>? _calculationProperties;

        /// <summary>
        /// A set of properties that are calculated upon Entitys regular properties.
        /// </summary>
        public InputList<Inputs.BlueprintCalculationPropertyArgs> CalculationProperties
        {
            get => _calculationProperties ?? (_calculationProperties = new InputList<Inputs.BlueprintCalculationPropertyArgs>());
            set => _calculationProperties = value;
        }

        /// <summary>
        /// Blueprints changelog destination, Supports WEBHOOK and KAFKA
        /// </summary>
        [Input("changelogDestination")]
        public Input<Inputs.BlueprintChangelogDestinationArgs>? ChangelogDestination { get; set; }

        /// <summary>
        /// The data source for entities of this blueprint
        /// </summary>
        [Input("dataSource")]
        public Input<string>? DataSource { get; set; }

        /// <summary>
        /// The description of the blueprint
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon of the blueprint
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The identifier of the blueprint
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        [Input("mirrorProperties")]
        private InputList<Inputs.BlueprintMirrorPropertyArgs>? _mirrorProperties;

        /// <summary>
        /// When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
        /// Blueprint.
        /// </summary>
        public InputList<Inputs.BlueprintMirrorPropertyArgs> MirrorProperties
        {
            get => _mirrorProperties ?? (_mirrorProperties = new InputList<Inputs.BlueprintMirrorPropertyArgs>());
            set => _mirrorProperties = value;
        }

        [Input("properties", required: true)]
        private InputList<Inputs.BlueprintPropertyArgs>? _properties;

        /// <summary>
        /// The metadata of the entity
        /// </summary>
        public InputList<Inputs.BlueprintPropertyArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.BlueprintPropertyArgs>());
            set => _properties = value;
        }

        [Input("relations")]
        private InputList<Inputs.BlueprintRelationArgs>? _relations;

        /// <summary>
        /// The blueprints that are connected to this blueprint
        /// </summary>
        public InputList<Inputs.BlueprintRelationArgs> Relations
        {
            get => _relations ?? (_relations = new InputList<Inputs.BlueprintRelationArgs>());
            set => _relations = value;
        }

        /// <summary>
        /// The display name of the blueprint
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public BlueprintArgs()
        {
        }
        public static new BlueprintArgs Empty => new BlueprintArgs();
    }

    public sealed class BlueprintState : global::Pulumi.ResourceArgs
    {
        [Input("calculationProperties")]
        private InputList<Inputs.BlueprintCalculationPropertyGetArgs>? _calculationProperties;

        /// <summary>
        /// A set of properties that are calculated upon Entitys regular properties.
        /// </summary>
        public InputList<Inputs.BlueprintCalculationPropertyGetArgs> CalculationProperties
        {
            get => _calculationProperties ?? (_calculationProperties = new InputList<Inputs.BlueprintCalculationPropertyGetArgs>());
            set => _calculationProperties = value;
        }

        /// <summary>
        /// Blueprints changelog destination, Supports WEBHOOK and KAFKA
        /// </summary>
        [Input("changelogDestination")]
        public Input<Inputs.BlueprintChangelogDestinationGetArgs>? ChangelogDestination { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The data source for entities of this blueprint
        /// </summary>
        [Input("dataSource")]
        public Input<string>? DataSource { get; set; }

        /// <summary>
        /// The description of the blueprint
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon of the blueprint
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The identifier of the blueprint
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        [Input("mirrorProperties")]
        private InputList<Inputs.BlueprintMirrorPropertyGetArgs>? _mirrorProperties;

        /// <summary>
        /// When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
        /// Blueprint.
        /// </summary>
        public InputList<Inputs.BlueprintMirrorPropertyGetArgs> MirrorProperties
        {
            get => _mirrorProperties ?? (_mirrorProperties = new InputList<Inputs.BlueprintMirrorPropertyGetArgs>());
            set => _mirrorProperties = value;
        }

        [Input("properties")]
        private InputList<Inputs.BlueprintPropertyGetArgs>? _properties;

        /// <summary>
        /// The metadata of the entity
        /// </summary>
        public InputList<Inputs.BlueprintPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.BlueprintPropertyGetArgs>());
            set => _properties = value;
        }

        [Input("relations")]
        private InputList<Inputs.BlueprintRelationGetArgs>? _relations;

        /// <summary>
        /// The blueprints that are connected to this blueprint
        /// </summary>
        public InputList<Inputs.BlueprintRelationGetArgs> Relations
        {
            get => _relations ?? (_relations = new InputList<Inputs.BlueprintRelationGetArgs>());
            set => _relations = value;
        }

        /// <summary>
        /// The display name of the blueprint
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("updatedBy")]
        public Input<string>? UpdatedBy { get; set; }

        public BlueprintState()
        {
        }
        public static new BlueprintState Empty => new BlueprintState();
    }
}
