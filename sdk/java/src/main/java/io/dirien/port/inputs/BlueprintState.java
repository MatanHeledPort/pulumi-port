// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.port.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.port.inputs.BlueprintCalculationPropertyArgs;
import io.dirien.port.inputs.BlueprintChangelogDestinationArgs;
import io.dirien.port.inputs.BlueprintMirrorPropertyArgs;
import io.dirien.port.inputs.BlueprintPropertyArgs;
import io.dirien.port.inputs.BlueprintRelationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlueprintState extends com.pulumi.resources.ResourceArgs {

    public static final BlueprintState Empty = new BlueprintState();

    /**
     * A set of properties that are calculated upon Entitys regular properties.
     * 
     */
    @Import(name="calculationProperties")
    private @Nullable Output<List<BlueprintCalculationPropertyArgs>> calculationProperties;

    /**
     * @return A set of properties that are calculated upon Entitys regular properties.
     * 
     */
    public Optional<Output<List<BlueprintCalculationPropertyArgs>>> calculationProperties() {
        return Optional.ofNullable(this.calculationProperties);
    }

    /**
     * Blueprints changelog destination, Supports WEBHOOK and KAFKA
     * 
     */
    @Import(name="changelogDestination")
    private @Nullable Output<BlueprintChangelogDestinationArgs> changelogDestination;

    /**
     * @return Blueprints changelog destination, Supports WEBHOOK and KAFKA
     * 
     */
    public Optional<Output<BlueprintChangelogDestinationArgs>> changelogDestination() {
        return Optional.ofNullable(this.changelogDestination);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The data source for entities of this blueprint
     * 
     * @deprecated
     * Data source is ignored
     * 
     */
    @Deprecated /* Data source is ignored */
    @Import(name="dataSource")
    private @Nullable Output<String> dataSource;

    /**
     * @return The data source for entities of this blueprint
     * 
     * @deprecated
     * Data source is ignored
     * 
     */
    @Deprecated /* Data source is ignored */
    public Optional<Output<String>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }

    /**
     * The description of the blueprint
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the blueprint
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The icon of the blueprint
     * 
     */
    @Import(name="icon")
    private @Nullable Output<String> icon;

    /**
     * @return The icon of the blueprint
     * 
     */
    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    /**
     * The identifier of the blueprint
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return The identifier of the blueprint
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
     * Blueprint.
     * 
     */
    @Import(name="mirrorProperties")
    private @Nullable Output<List<BlueprintMirrorPropertyArgs>> mirrorProperties;

    /**
     * @return When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
     * Blueprint.
     * 
     */
    public Optional<Output<List<BlueprintMirrorPropertyArgs>>> mirrorProperties() {
        return Optional.ofNullable(this.mirrorProperties);
    }

    /**
     * The metadata of the entity
     * 
     */
    @Import(name="properties")
    private @Nullable Output<List<BlueprintPropertyArgs>> properties;

    /**
     * @return The metadata of the entity
     * 
     */
    public Optional<Output<List<BlueprintPropertyArgs>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The blueprints that are connected to this blueprint
     * 
     */
    @Import(name="relations")
    private @Nullable Output<List<BlueprintRelationArgs>> relations;

    /**
     * @return The blueprints that are connected to this blueprint
     * 
     */
    public Optional<Output<List<BlueprintRelationArgs>>> relations() {
        return Optional.ofNullable(this.relations);
    }

    /**
     * The display name of the blueprint
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The display name of the blueprint
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="updatedBy")
    private @Nullable Output<String> updatedBy;

    public Optional<Output<String>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    private BlueprintState() {}

    private BlueprintState(BlueprintState $) {
        this.calculationProperties = $.calculationProperties;
        this.changelogDestination = $.changelogDestination;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.dataSource = $.dataSource;
        this.description = $.description;
        this.icon = $.icon;
        this.identifier = $.identifier;
        this.mirrorProperties = $.mirrorProperties;
        this.properties = $.properties;
        this.relations = $.relations;
        this.title = $.title;
        this.updatedAt = $.updatedAt;
        this.updatedBy = $.updatedBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlueprintState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlueprintState $;

        public Builder() {
            $ = new BlueprintState();
        }

        public Builder(BlueprintState defaults) {
            $ = new BlueprintState(Objects.requireNonNull(defaults));
        }

        /**
         * @param calculationProperties A set of properties that are calculated upon Entitys regular properties.
         * 
         * @return builder
         * 
         */
        public Builder calculationProperties(@Nullable Output<List<BlueprintCalculationPropertyArgs>> calculationProperties) {
            $.calculationProperties = calculationProperties;
            return this;
        }

        /**
         * @param calculationProperties A set of properties that are calculated upon Entitys regular properties.
         * 
         * @return builder
         * 
         */
        public Builder calculationProperties(List<BlueprintCalculationPropertyArgs> calculationProperties) {
            return calculationProperties(Output.of(calculationProperties));
        }

        /**
         * @param calculationProperties A set of properties that are calculated upon Entitys regular properties.
         * 
         * @return builder
         * 
         */
        public Builder calculationProperties(BlueprintCalculationPropertyArgs... calculationProperties) {
            return calculationProperties(List.of(calculationProperties));
        }

        /**
         * @param changelogDestination Blueprints changelog destination, Supports WEBHOOK and KAFKA
         * 
         * @return builder
         * 
         */
        public Builder changelogDestination(@Nullable Output<BlueprintChangelogDestinationArgs> changelogDestination) {
            $.changelogDestination = changelogDestination;
            return this;
        }

        /**
         * @param changelogDestination Blueprints changelog destination, Supports WEBHOOK and KAFKA
         * 
         * @return builder
         * 
         */
        public Builder changelogDestination(BlueprintChangelogDestinationArgs changelogDestination) {
            return changelogDestination(Output.of(changelogDestination));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param dataSource The data source for entities of this blueprint
         * 
         * @return builder
         * 
         * @deprecated
         * Data source is ignored
         * 
         */
        @Deprecated /* Data source is ignored */
        public Builder dataSource(@Nullable Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource The data source for entities of this blueprint
         * 
         * @return builder
         * 
         * @deprecated
         * Data source is ignored
         * 
         */
        @Deprecated /* Data source is ignored */
        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param description The description of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param icon The icon of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        /**
         * @param icon The icon of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        /**
         * @param identifier The identifier of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier The identifier of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param mirrorProperties When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
         * Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder mirrorProperties(@Nullable Output<List<BlueprintMirrorPropertyArgs>> mirrorProperties) {
            $.mirrorProperties = mirrorProperties;
            return this;
        }

        /**
         * @param mirrorProperties When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
         * Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder mirrorProperties(List<BlueprintMirrorPropertyArgs> mirrorProperties) {
            return mirrorProperties(Output.of(mirrorProperties));
        }

        /**
         * @param mirrorProperties When two Blueprints are connected via a Relation, a new set of properties becomes available to Entities in the source
         * Blueprint.
         * 
         * @return builder
         * 
         */
        public Builder mirrorProperties(BlueprintMirrorPropertyArgs... mirrorProperties) {
            return mirrorProperties(List.of(mirrorProperties));
        }

        /**
         * @param properties The metadata of the entity
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<List<BlueprintPropertyArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties The metadata of the entity
         * 
         * @return builder
         * 
         */
        public Builder properties(List<BlueprintPropertyArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param properties The metadata of the entity
         * 
         * @return builder
         * 
         */
        public Builder properties(BlueprintPropertyArgs... properties) {
            return properties(List.of(properties));
        }

        /**
         * @param relations The blueprints that are connected to this blueprint
         * 
         * @return builder
         * 
         */
        public Builder relations(@Nullable Output<List<BlueprintRelationArgs>> relations) {
            $.relations = relations;
            return this;
        }

        /**
         * @param relations The blueprints that are connected to this blueprint
         * 
         * @return builder
         * 
         */
        public Builder relations(List<BlueprintRelationArgs> relations) {
            return relations(Output.of(relations));
        }

        /**
         * @param relations The blueprints that are connected to this blueprint
         * 
         * @return builder
         * 
         */
        public Builder relations(BlueprintRelationArgs... relations) {
            return relations(List.of(relations));
        }

        /**
         * @param title The display name of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The display name of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public Builder updatedBy(@Nullable Output<String> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        public Builder updatedBy(String updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        public BlueprintState build() {
            return $;
        }
    }

}
