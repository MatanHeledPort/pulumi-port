// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.port;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.dirien.port.inputs.ActionInvocationMethodArgs;
import io.dirien.port.inputs.ActionUserPropertyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActionArgs Empty = new ActionArgs();

    /**
     * The identifier of the blueprint
     * 
     */
    @Import(name="blueprintIdentifier", required=true)
    private Output<String> blueprintIdentifier;

    /**
     * @return The identifier of the blueprint
     * 
     */
    public Output<String> blueprintIdentifier() {
        return this.blueprintIdentifier;
    }

    /**
     * The description of the action
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the action
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The icon of the action
     * 
     */
    @Import(name="icon")
    private @Nullable Output<String> icon;

    /**
     * @return The icon of the action
     * 
     */
    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    /**
     * The identifier of the action
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return The identifier of the action
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * The methods the action is dispatched in. Supports WEBHOOK, KAFKA and GITHUB
     * 
     */
    @Import(name="invocationMethod", required=true)
    private Output<ActionInvocationMethodArgs> invocationMethod;

    /**
     * @return The methods the action is dispatched in. Supports WEBHOOK, KAFKA and GITHUB
     * 
     */
    public Output<ActionInvocationMethodArgs> invocationMethod() {
        return this.invocationMethod;
    }

    /**
     * The display name of the action
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return The display name of the action
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * The type of the action, one of CREATE, DAY-2, DELETE
     * 
     */
    @Import(name="trigger", required=true)
    private Output<String> trigger;

    /**
     * @return The type of the action, one of CREATE, DAY-2, DELETE
     * 
     */
    public Output<String> trigger() {
        return this.trigger;
    }

    /**
     * The input properties of the action
     * 
     */
    @Import(name="userProperties")
    private @Nullable Output<List<ActionUserPropertyArgs>> userProperties;

    /**
     * @return The input properties of the action
     * 
     */
    public Optional<Output<List<ActionUserPropertyArgs>>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private ActionArgs() {}

    private ActionArgs(ActionArgs $) {
        this.blueprintIdentifier = $.blueprintIdentifier;
        this.description = $.description;
        this.icon = $.icon;
        this.identifier = $.identifier;
        this.invocationMethod = $.invocationMethod;
        this.title = $.title;
        this.trigger = $.trigger;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActionArgs $;

        public Builder() {
            $ = new ActionArgs();
        }

        public Builder(ActionArgs defaults) {
            $ = new ActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blueprintIdentifier The identifier of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder blueprintIdentifier(Output<String> blueprintIdentifier) {
            $.blueprintIdentifier = blueprintIdentifier;
            return this;
        }

        /**
         * @param blueprintIdentifier The identifier of the blueprint
         * 
         * @return builder
         * 
         */
        public Builder blueprintIdentifier(String blueprintIdentifier) {
            return blueprintIdentifier(Output.of(blueprintIdentifier));
        }

        /**
         * @param description The description of the action
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the action
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param icon The icon of the action
         * 
         * @return builder
         * 
         */
        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        /**
         * @param icon The icon of the action
         * 
         * @return builder
         * 
         */
        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        /**
         * @param identifier The identifier of the action
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier The identifier of the action
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param invocationMethod The methods the action is dispatched in. Supports WEBHOOK, KAFKA and GITHUB
         * 
         * @return builder
         * 
         */
        public Builder invocationMethod(Output<ActionInvocationMethodArgs> invocationMethod) {
            $.invocationMethod = invocationMethod;
            return this;
        }

        /**
         * @param invocationMethod The methods the action is dispatched in. Supports WEBHOOK, KAFKA and GITHUB
         * 
         * @return builder
         * 
         */
        public Builder invocationMethod(ActionInvocationMethodArgs invocationMethod) {
            return invocationMethod(Output.of(invocationMethod));
        }

        /**
         * @param title The display name of the action
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The display name of the action
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param trigger The type of the action, one of CREATE, DAY-2, DELETE
         * 
         * @return builder
         * 
         */
        public Builder trigger(Output<String> trigger) {
            $.trigger = trigger;
            return this;
        }

        /**
         * @param trigger The type of the action, one of CREATE, DAY-2, DELETE
         * 
         * @return builder
         * 
         */
        public Builder trigger(String trigger) {
            return trigger(Output.of(trigger));
        }

        /**
         * @param userProperties The input properties of the action
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable Output<List<ActionUserPropertyArgs>> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties The input properties of the action
         * 
         * @return builder
         * 
         */
        public Builder userProperties(List<ActionUserPropertyArgs> userProperties) {
            return userProperties(Output.of(userProperties));
        }

        /**
         * @param userProperties The input properties of the action
         * 
         * @return builder
         * 
         */
        public Builder userProperties(ActionUserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public ActionArgs build() {
            $.blueprintIdentifier = Objects.requireNonNull($.blueprintIdentifier, "expected parameter 'blueprintIdentifier' to be non-null");
            $.identifier = Objects.requireNonNull($.identifier, "expected parameter 'identifier' to be non-null");
            $.invocationMethod = Objects.requireNonNull($.invocationMethod, "expected parameter 'invocationMethod' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.trigger = Objects.requireNonNull($.trigger, "expected parameter 'trigger' to be non-null");
            return $;
        }
    }

}
