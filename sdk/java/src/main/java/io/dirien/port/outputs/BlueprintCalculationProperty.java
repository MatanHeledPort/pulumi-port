// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.port.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BlueprintCalculationProperty {
    private String calculation;
    private @Nullable Boolean colorized;
    private @Nullable Map<String,String> colors;
    private @Nullable String description;
    private @Nullable String format;
    private @Nullable String icon;
    private String identifier;
    private @Nullable String title;
    private String type;

    private BlueprintCalculationProperty() {}
    public String calculation() {
        return this.calculation;
    }
    public Optional<Boolean> colorized() {
        return Optional.ofNullable(this.colorized);
    }
    public Map<String,String> colors() {
        return this.colors == null ? Map.of() : this.colors;
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    public Optional<String> icon() {
        return Optional.ofNullable(this.icon);
    }
    public String identifier() {
        return this.identifier;
    }
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlueprintCalculationProperty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String calculation;
        private @Nullable Boolean colorized;
        private @Nullable Map<String,String> colors;
        private @Nullable String description;
        private @Nullable String format;
        private @Nullable String icon;
        private String identifier;
        private @Nullable String title;
        private String type;
        public Builder() {}
        public Builder(BlueprintCalculationProperty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.calculation = defaults.calculation;
    	      this.colorized = defaults.colorized;
    	      this.colors = defaults.colors;
    	      this.description = defaults.description;
    	      this.format = defaults.format;
    	      this.icon = defaults.icon;
    	      this.identifier = defaults.identifier;
    	      this.title = defaults.title;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder calculation(String calculation) {
            this.calculation = Objects.requireNonNull(calculation);
            return this;
        }
        @CustomType.Setter
        public Builder colorized(@Nullable Boolean colorized) {
            this.colorized = colorized;
            return this;
        }
        @CustomType.Setter
        public Builder colors(@Nullable Map<String,String> colors) {
            this.colors = colors;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder icon(@Nullable String icon) {
            this.icon = icon;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public BlueprintCalculationProperty build() {
            final var o = new BlueprintCalculationProperty();
            o.calculation = calculation;
            o.colorized = colorized;
            o.colors = colors;
            o.description = description;
            o.format = format;
            o.icon = icon;
            o.identifier = identifier;
            o.title = title;
            o.type = type;
            return o;
        }
    }
}
