// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.port.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntityPropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntityPropertyArgs Empty = new EntityPropertyArgs();

    @Import(name="items")
    private @Nullable Output<List<String>> items;

    public Optional<Output<List<String>>> items() {
        return Optional.ofNullable(this.items);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * @deprecated
     * property type is not required anymore
     * 
     */
    @Deprecated /* property type is not required anymore */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @deprecated
     * property type is not required anymore
     * 
     */
    @Deprecated /* property type is not required anymore */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private EntityPropertyArgs() {}

    private EntityPropertyArgs(EntityPropertyArgs $) {
        this.items = $.items;
        this.name = $.name;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityPropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityPropertyArgs $;

        public Builder() {
            $ = new EntityPropertyArgs();
        }

        public Builder(EntityPropertyArgs defaults) {
            $ = new EntityPropertyArgs(Objects.requireNonNull(defaults));
        }

        public Builder items(@Nullable Output<List<String>> items) {
            $.items = items;
            return this;
        }

        public Builder items(List<String> items) {
            return items(Output.of(items));
        }

        public Builder items(String... items) {
            return items(List.of(items));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * property type is not required anymore
         * 
         */
        @Deprecated /* property type is not required anymore */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * property type is not required anymore
         * 
         */
        @Deprecated /* property type is not required anymore */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public EntityPropertyArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
