// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.port.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlueprintPropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlueprintPropertyArgs Empty = new BlueprintPropertyArgs();

    @Import(name="default")
    private @Nullable Output<String> default_;

    public Optional<Output<String>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="defaultItems")
    private @Nullable Output<List<String>> defaultItems;

    public Optional<Output<List<String>>> defaultItems() {
        return Optional.ofNullable(this.defaultItems);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="enumColors")
    private @Nullable Output<Map<String,String>> enumColors;

    public Optional<Output<Map<String,String>>> enumColors() {
        return Optional.ofNullable(this.enumColors);
    }

    @Import(name="enums")
    private @Nullable Output<List<String>> enums;

    public Optional<Output<List<String>>> enums() {
        return Optional.ofNullable(this.enums);
    }

    @Import(name="format")
    private @Nullable Output<String> format;

    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    @Import(name="icon")
    private @Nullable Output<String> icon;

    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    @Import(name="identifier", required=true)
    private Output<String> identifier;

    public Output<String> identifier() {
        return this.identifier;
    }

    @Import(name="required")
    private @Nullable Output<Boolean> required;

    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    @Import(name="spec")
    private @Nullable Output<String> spec;

    public Optional<Output<String>> spec() {
        return Optional.ofNullable(this.spec);
    }

    @Import(name="title", required=true)
    private Output<String> title;

    public Output<String> title() {
        return this.title;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private BlueprintPropertyArgs() {}

    private BlueprintPropertyArgs(BlueprintPropertyArgs $) {
        this.default_ = $.default_;
        this.defaultItems = $.defaultItems;
        this.description = $.description;
        this.enumColors = $.enumColors;
        this.enums = $.enums;
        this.format = $.format;
        this.icon = $.icon;
        this.identifier = $.identifier;
        this.required = $.required;
        this.spec = $.spec;
        this.title = $.title;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlueprintPropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlueprintPropertyArgs $;

        public Builder() {
            $ = new BlueprintPropertyArgs();
        }

        public Builder(BlueprintPropertyArgs defaults) {
            $ = new BlueprintPropertyArgs(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable Output<String> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(String default_) {
            return default_(Output.of(default_));
        }

        public Builder defaultItems(@Nullable Output<List<String>> defaultItems) {
            $.defaultItems = defaultItems;
            return this;
        }

        public Builder defaultItems(List<String> defaultItems) {
            return defaultItems(Output.of(defaultItems));
        }

        public Builder defaultItems(String... defaultItems) {
            return defaultItems(List.of(defaultItems));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enumColors(@Nullable Output<Map<String,String>> enumColors) {
            $.enumColors = enumColors;
            return this;
        }

        public Builder enumColors(Map<String,String> enumColors) {
            return enumColors(Output.of(enumColors));
        }

        public Builder enums(@Nullable Output<List<String>> enums) {
            $.enums = enums;
            return this;
        }

        public Builder enums(List<String> enums) {
            return enums(Output.of(enums));
        }

        public Builder enums(String... enums) {
            return enums(List.of(enums));
        }

        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        public Builder spec(@Nullable Output<String> spec) {
            $.spec = spec;
            return this;
        }

        public Builder spec(String spec) {
            return spec(Output.of(spec));
        }

        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BlueprintPropertyArgs build() {
            $.identifier = Objects.requireNonNull($.identifier, "expected parameter 'identifier' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
